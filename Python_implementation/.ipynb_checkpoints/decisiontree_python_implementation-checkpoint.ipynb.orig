{
 "cells": [
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 1,
=======
   "execution_count": 26,
>>>>>>> figures change
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import tree  \n",
    "from sklearn.externals import joblib\n",
    "import pydotplus\n",
    "from sklearn.datasets import load_iris\n",
    "import collections\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "from sklearn.metrics import precision_recall_fscore_support\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn import preprocessing\n",
    "import itertools\n",
    "#import graphviz \n",
    "%matplotlib inline\n",
    "\n",
    "def plot_confusion_matrix(cm, classes,\n",
    "                          normalize=False,\n",
    "                          title='Confusion matrix',\n",
    "                          cmap=plt.cm.Blues):\n",
    "    \"\"\"\n",
    "    This function prints and plots the confusion matrix.\n",
    "    Normalization can be applied by setting `normalize=True`.\n",
    "    \"\"\"\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "        print(\"Normalized confusion matrix\")\n",
    "    else:\n",
    "        print('Confusion matrix, without normalization')\n",
    "\n",
    "    print(cm)\n",
    "\n",
    "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "#     plt.title(title)\n",
    "    plt.colorbar()\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation=90,fontsize=16)\n",
    "    plt.yticks(tick_marks, classes,fontsize=16)\n",
    "\n",
    "    fmt = '.2f' if normalize else 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "        plt.text(j, i, format(cm[i, j], fmt),\n",
    "                 horizontalalignment=\"center\",\n",
    "                 color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "\n",
    "    plt.tight_layout()\n",
    "    plt.ylabel('True label',fontsize=16)\n",
    "    plt.xlabel('Predicted label',fontsize=16)\n",
    "    return cm\n",
    "\n",
    "def get_dataset(file_name,data_class_name_num,data_class_name):\n",
    "    data = pd.read_csv(file_name)\n",
    "    data = data.reset_index(drop=True)\n",
    "    data = data.dropna()\n",
    "    X = data.iloc[:,0:4]\n",
    "    X = X.reset_index(drop=True)\n",
    "    X = X.dropna()\n",
    "    Y = data.iloc[:,-1]\n",
    "    Y = Y.replace(data_class_name_num, data_class_name)\n",
    "    Y = Y.reset_index(drop=True)\n",
    "    Y = Y.dropna()\n",
    "\n",
    "    min_max_scaler = preprocessing.MinMaxScaler()\n",
    "    values = X.values\n",
    "    values_scaled = min_max_scaler.fit_transform(values)\n",
    "#     X = pd.DataFrame(values_scaled)\n",
    "#     print(df.head())\n",
    "    return X,Y\n",
    "\n",
    "def calc_stat(clf,X,Y):\n",
    "    score = clf.score(X,Y)\n",
    "    y_true = Y;\n",
    "    y_pred = clf.predict(X) \n",
    "    precision,recall,fbeta_score,support = precision_recall_fscore_support(y_true, \n",
    "                                                                       y_pred, \n",
    "                                                                       beta=1.0, \n",
    "                                                                       labels=None, \n",
    "                                                                       pos_label=1, \n",
    "                                                                       average=None, \n",
    "                                                                       warn_for=('precision', 'recall', 'f-score'), \n",
    "                                                                       sample_weight=None)\n",
    "    return score,precision,recall,fbeta_score,support \n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 2,
=======
   "execution_count": 50,
>>>>>>> figures change
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "Real Data intel:  Hold:  9862  Takeoff:  501  Hover:  1767  Search:  1251  Land:  598\n",
      "Real Data ar:  Hold:  4633  Takeoff:  4308  Hover:  21453  Search:  14447  Land:  2050\n",
      "Simulation Data:  Hold:  3715  Takeoff:  795  Hover:  1185  Search:  8482  Land:  837\n",
      "Simulation iris Data:  Hold:  6323  Takeoff:  684  Hover:  6285  Search:  5597  Land:  995\n",
      "Simulation solo Data:  Hold:  11817  Takeoff:  1014  Hover:  4586  Search:  7122  Land:  1472\n"
=======
      "Real Data:  Hold:  9862  Takeoff:  501  Hover:  1767  Search:  1251  Land:  598  Total:  13979\n",
      "Simulation Data:  Hold:  3715  Takeoff:  795  Hover:  1185  Search:  8482  Land:  837  Total:  15014\n",
      "Simulation iris Data:  Hold:  6323  Takeoff:  684  Hover:  6285  Search:  5597  Land:  995  Total:  19884\n",
      "Simulation solo Data:  Hold:  11817  Takeoff:  1014  Hover:  4586  Search:  7122  Land:  1472  Total:  26011\n",
      "Simulation concat Data:  Hold:  28002  Takeoff:  2199  Hover:  12638  Search:  13970  Land:  3065  Total:  59874\n"
>>>>>>> figures change
     ]
    }
   ],
   "source": [
    "own_data = True\n",
    "experiment = 1\n",
    "no_off_class = 5\n",
    "data_feature_names = [ 'altitude', 'vel_x', 'vel_y', 'vel_z' ]\n",
    "data_class_name_num = [1, 2, 3, 4, 5]\n",
    "data_class_name = ['Hold', 'Takeoff', 'Hover', 'Search', 'Land']\n",
    "\n",
    "data_feature_names_gtri = [ 'roll', 'pitch', 'yaw', 'rollspeed','pitchspeed','yawspeed', 'xacc', 'yacc', 'zacc']\n",
    "data_class_name_num_gtri = [0, 1, 2, 3]\n",
    "data_class_name_gtri = ['Hold', 'Fly Orbit and Observe', 'Fly Search Pattern', 'Survey Target']\n",
    "\n",
    "\n",
    "datagtri = pd.read_csv('GTRIdataset.csv')\n",
    "datagtri = datagtri.dropna()\n",
    "gtriX = datagtri.iloc[:,1:10]\n",
    "gtriX = gtriX.reset_index(drop=True)\n",
    "gtriX = gtriX.dropna()\n",
    "gtriY = datagtri.iloc[:,10]\n",
    "gtriY = gtriY.replace(data_class_name_num_gtri, data_class_name_gtri)\n",
    "gtriY = gtriY.reset_index(drop=True)\n",
    "gtriY = gtriY.dropna()\n",
    "\n",
    "\n",
    "intelX,intelY = get_dataset('intelDroneData.csv',data_class_name_num,data_class_name)\n",
    "\n",
    "print('Real Data intel: ', 'Hold: ', len(intelY[intelY=='Hold']),\n",
    "      ' Takeoff: ', len(intelY[intelY=='Takeoff']),\n",
    "      ' Hover: ', len(intelY[intelY=='Hover']),\n",
    "      ' Search: ', len(intelY[intelY=='Search']),\n",
    "      ' Land: ', len(intelY[intelY=='Land']),\n",
    "      ' Total: ', len(intelY))\n",
    "\n",
    "arX,arY = get_dataset('arDroneData.csv',data_class_name_num,data_class_name)\n",
    "\n",
    "print('Real Data ar: ', 'Hold: ', len(arY[arY=='Hold']),\n",
    "      ' Takeoff: ', len(arY[arY=='Takeoff']),\n",
    "      ' Hover: ', len(arY[arY=='Hover']),\n",
    "      ' Search: ', len(arY[arY=='Search']),\n",
    "      ' Land: ', len(arY[arY=='Land']))\n",
    "\n",
    "inarX,inarY = get_dataset('intelardata.csv',data_class_name_num,data_class_name)\n",
    "inarsimX,inarsimY = get_dataset('intelarsimdata.csv',data_class_name_num,data_class_name)\n",
    "\n",
    "simirisX,simirisY = get_dataset('datasetiris.csv',data_class_name_num,data_class_name)\n",
    "simsoloX,simsoloY = get_dataset('datasetsolo.csv',data_class_name_num,data_class_name)\n",
    "simX,simY = get_dataset('gazeboSimulationData.csv',data_class_name_num,data_class_name)\n",
    "\n",
    "simconcatX = pd.concat([simirisX,simsoloX,intelX],axis=0)\n",
    "simconcatY = pd.concat([simirisY,simsoloY,intelY],axis=0)\n",
    "\n",
<<<<<<< HEAD
    "# simconcatX = pd.concat([arX,intelX],axis=0)\n",
    "# simconcatY = pd.concat([arY,intelY],axis=0)\n",
=======
    "# simconcatX = pd.concat([simirisX,simsoloX],axis=0)\n",
    "# simconcatY = pd.concat([simirisY,simsoloY],axis=0)\n",
>>>>>>> figures change
    "\n",
    "# simX,simY = simsoloX,simsoloY\n",
    "# simX,simY = simirisX,simirisY\n",
    "# simX,simY = simconcatX,simconcatY\n",
    "print('Simulation Data: ', 'Hold: ', len(simY[simY=='Hold']),\n",
    "      ' Takeoff: ', len(simY[simY=='Takeoff']),\n",
    "      ' Hover: ', len(simY[simY=='Hover']),\n",
    "      ' Search: ', len(simY[simY=='Search']),\n",
    "      ' Land: ', len(simY[simY=='Land']),\n",
    "      ' Total: ', len(simY))\n",
    "\n",
    "print('Simulation iris Data: ', 'Hold: ', len(simirisY[simirisY=='Hold']),\n",
    "      ' Takeoff: ', len(simirisY[simirisY=='Takeoff']),\n",
    "      ' Hover: ', len(simirisY[simirisY=='Hover']),\n",
    "      ' Search: ', len(simirisY[simirisY=='Search']),\n",
    "      ' Land: ', len(simirisY[simirisY=='Land']),\n",
    "      ' Total: ', len(simirisY))\n",
    "\n",
    "print('Simulation solo Data: ', 'Hold: ', len(simsoloY[simsoloY=='Hold']),\n",
    "      ' Takeoff: ', len(simsoloY[simsoloY=='Takeoff']),\n",
    "      ' Hover: ', len(simsoloY[simsoloY=='Hover']),\n",
    "      ' Search: ', len(simsoloY[simsoloY=='Search']),\n",
    "      ' Land: ', len(simsoloY[simsoloY=='Land']),\n",
    "      ' Total: ', len(simsoloY))\n",
    "\n",
    "print('Simulation concat Data: ', 'Hold: ', len(simconcatY[simconcatY=='Hold']),\n",
    "      ' Takeoff: ', len(simconcatY[simconcatY=='Takeoff']),\n",
    "      ' Hover: ', len(simconcatY[simconcatY=='Hover']),\n",
    "      ' Search: ', len(simconcatY[simconcatY=='Search']),\n",
    "      ' Land: ', len(simconcatY[simconcatY=='Land']),\n",
    "      ' Total: ', len(simconcatY))"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 28,
=======
   "execution_count": 51,
>>>>>>> figures change
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train stat:\n",
<<<<<<< HEAD
      "Accuracy:  0.9969656601539373\n",
      "precision:  [0.99 0.99 1.   1.   1.  ]\n",
      "recall:  [1.   1.   0.96 1.   0.98]\n",
      "Fscore:  [1.   0.99 0.98 1.   0.99]\n",
      "support [ 4633 21453  2050 14447  4308]\n",
      "Test stat:\n",
      "Accuracy:  0.96271637816245\n",
      "precision:  [0.98 0.85 0.93 0.98 0.9 ]\n",
      "recall:  [0.98 0.84 0.94 0.98 0.87]\n",
      "Fscore:  [0.98 0.85 0.94 0.98 0.89]\n",
      "Intel stat:\n",
      "Accuracy:  0.8504900207454038\n",
      "precision:  [0.98 0.76 0.53 0.58 0.34]\n",
      "recall:  [0.99 0.27 0.35 0.84 0.81]\n",
      "Fscore:  [0.98 0.39 0.42 0.69 0.48]\n",
      "AR stat:\n",
      "Accuracy:  0.4406815806871255\n",
      "precision:  [0.8  0.63 0.22 0.39 0.71]\n",
      "recall:  [9.88e-01 7.92e-04 3.38e-01 1.00e+00 2.17e-01]\n",
      "Fscore:  [0.89 0.   0.27 0.56 0.33]\n",
      "Iris stat:\n",
      "Accuracy:  0.5447093140213237\n",
      "precision:  [0.96 0.49 0.32 0.31 0.23]\n",
      "recall:  [0.93 0.31 0.77 0.38 0.2 ]\n",
      "Fscore:  [0.95 0.38 0.45 0.34 0.22]\n",
      "Solo stat:\n",
      "Accuracy:  0.6530698550613202\n",
      "precision:  [0.95 0.37 0.27 0.49 0.2 ]\n",
      "recall:  [0.97 0.33 0.5  0.44 0.14]\n",
      "Fscore:  [0.96 0.35 0.35 0.46 0.16]\n"
=======
      "Accuracy:  0.9993319303871463\n",
      "precision:  0.9994122664523595\n",
      "recall:  0.9988010619214875\n",
      "Fscore:  0.9991058497121044\n",
      "Test stat:\n",
      "Accuracy:  0.9885893710124595\n",
      "precision:  [1.   0.97 0.99 0.98 0.98]\n",
      "recall:  [1.   0.98 0.99 0.98 0.97]\n",
      "Fscore:  [1.   0.98 0.99 0.98 0.98]\n",
      "Intel stat:\n",
      "Accuracy:  0.9973674797911152\n",
      "precision:  [1.   0.99 1.   0.99 1.  ]\n",
      "recall:  [1.   0.99 0.99 0.99 0.99]\n",
      "Fscore:  [1.   0.99 0.99 0.99 0.99]\n",
      "Iris stat:\n",
      "Accuracy:  0.9926423254878293\n",
      "precision:  [1.   0.99 0.99 0.99 0.99]\n",
      "recall:  [1.   0.99 0.99 0.99 0.98]\n",
      "Fscore:  [1.   0.99 0.99 0.99 0.99]\n",
      "Solo stat:\n",
      "Accuracy:  0.9931375187420706\n",
      "precision:  [1.   0.98 1.   0.99 0.99]\n",
      "recall:  [1.   0.99 0.99 0.99 0.98]\n",
      "Fscore:  [1.   0.98 0.99 0.99 0.99]\n",
      "Simulation testy Data:  Hold:  13966  Takeoff:  1108  Hover:  6293  Search:  7039  Land:  1531  Total:  29937\n",
      "Confusion matrix, without normalization\n",
      "[[13951     0     4     0    11]\n",
      " [    0  6156     7   126     4]\n",
      " [   12    15  1504     0     0]\n",
      " [    0   161     0  6876     2]\n",
      " [   11     7     0     8  1082]]\n",
      "Normalized confusion matrix\n",
      "[[9.99e-01 0.00e+00 2.86e-04 0.00e+00 7.88e-04]\n",
      " [0.00e+00 9.78e-01 1.11e-03 2.00e-02 6.36e-04]\n",
      " [7.84e-03 9.80e-03 9.82e-01 0.00e+00 0.00e+00]\n",
      " [0.00e+00 2.29e-02 0.00e+00 9.77e-01 2.84e-04]\n",
      " [9.93e-03 6.32e-03 0.00e+00 7.22e-03 9.77e-01]]\n"
>>>>>>> figures change
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# # to test gtri data\n",
    "# own_data = False\n",
    "# dataX = gtriX\n",
    "# dataY = gtriY\n",
    "# data_feature_names = data_feature_names_gtri\n",
    "# data_class_name = data_class_name_gtri\n",
    "\n",
    "# # to test intel drone data\n",
    "# dataX = intelX\n",
    "# dataY = intelY\n",
    "\n",
    "# # to test ar drone data\n",
    "# dataX = arX\n",
    "# dataY = arY\n",
    "\n",
    "# #to test simulation data\n",
    "dataX = simX\n",
    "dataY = simY\n",
    "\n",
    "# dataX = simirisX\n",
    "# dataY = simirisY\n",
    "\n",
    "# dataX = simsoloX\n",
    "# dataY = simsoloY\n",
    "\n",
    "#dataX = simconcatX\n",
    "#dataY = simconcatY\n",
    "\n",
    "# dataX=inarX\n",
    "# dataY=inarY\n",
    "\n",
    "# dataX=inarsimX\n",
    "# dataY=inarsimY\n",
    "\n",
    "Noofrun = 1\n",
    "\n",
    "trainAccuracy = 0\n",
    "trainPrecision = np.zeros(no_off_class)\n",
    "trainRecall = np.zeros(no_off_class)\n",
    "trainF1score = np.zeros(no_off_class)\n",
    "\n",
    "testAccuracy = 0\n",
    "testPrecision = np.zeros(no_off_class)\n",
    "testRecall = np.zeros(no_off_class)\n",
    "testF1score = np.zeros(no_off_class)\n",
    "\n",
    "intelAccuracy = 0\n",
    "intelPrecision = np.zeros(no_off_class)\n",
    "intelRecall = np.zeros(no_off_class)\n",
    "intelF1score = np.zeros(no_off_class)\n",
    "\n",
    "arAccuracy = 0\n",
    "arPrecision = np.zeros(no_off_class)\n",
    "arRecall = np.zeros(no_off_class)\n",
    "arF1score = np.zeros(no_off_class)\n",
    "\n",
    "soloAccuracy = 0\n",
    "soloPrecision = np.zeros(no_off_class)\n",
    "soloRecall = np.zeros(no_off_class)\n",
    "soloF1score = np.zeros(no_off_class)\n",
    "\n",
    "irisAccuracy = 0\n",
    "irisPrecision = np.zeros(no_off_class)\n",
    "irisRecall = np.zeros(no_off_class)\n",
    "irisF1score = np.zeros(no_off_class)\n",
    "\n",
    "#######################\n",
    "# dataX, testdataX, dataY, testdataY = train_test_split(dataX, dataY, \n",
    "#                                                     test_size=0.4, \n",
    "#                                                     random_state=np.random.randint(100))\n",
    "# datap=np.arange(.1,1,.1)\n",
    "# score0=[]\n",
    "# score1=[]\n",
    "# for dp in range(len(datap)):\n",
    "#     score2=0\n",
    "#     score3=0\n",
    "#     for r in range(Noofrun):\n",
    "#         dataPartision = 1.0 - datap[dp]\n",
    "#         trainX, testX, trainY, testY = train_test_split(dataX, dataY, \n",
    "#                                                     test_size=dataPartision, \n",
    "#                                                     random_state=np.random.randint(100))\n",
    "#         trainX = trainX.reset_index(drop=True)\n",
    "#         trainX = trainX.dropna()\n",
    "#         trainY = trainY.reset_index(drop=True)\n",
    "#         trainY = trainY.dropna()\n",
    "\n",
    "#         clf = tree.DecisionTreeClassifier(criterion='gini',#'entropy',#'gini', \n",
    "#                                       splitter='best', \n",
    "#                                       max_depth=None,#default None \n",
    "#                                       min_samples_split=2, \n",
    "#                                       min_samples_leaf=1, \n",
    "#                                       min_weight_fraction_leaf=0.0, \n",
    "#                                       max_features=None, \n",
    "#                                       random_state=None, \n",
    "#                                       max_leaf_nodes=None, \n",
    "#                                       min_impurity_decrease=0.0, \n",
    "#                                       min_impurity_split=None, \n",
    "#                                       class_weight=None, \n",
    "#                                       presort=False)                                             \n",
    "\n",
    "\n",
    "#         clf = clf.fit(trainX, trainY)\n",
    "#         score,precision,recall,fbeta_score,support = calc_stat(clf,trainX,trainY)\n",
    "#         score2 += score\n",
    "#         score,precision,recall,fbeta_score,support = calc_stat(clf,testdataX,testdataY)\n",
    "#         score3 += score\n",
    "#     score2 /= Noofrun\n",
    "#     score0.append(score2)\n",
    "#     score3 /= Noofrun\n",
    "#     score1.append(score3)\n",
    "    \n",
    "\n",
    "# plt.plot(datap,score0,label='train accuracy',linewidth=3,c='r')\n",
    "# plt.plot(datap,score1,label='test accuracy',linewidth=3,c='b')\n",
    "# plt.legend(prop={'size': 18})\n",
    "# plt.grid()\n",
    "# plt.xlabel('Fraction of data used for training',fontsize=18)\n",
    "# plt.ylabel('Percent accuracy',fontsize=18)\n",
    "# plt.xticks(fontsize=18)\n",
    "# plt.yticks(fontsize=18)\n",
    "#######################\n",
    "\n",
    "for r in range(Noofrun):\n",
    "#     indx = [i for i in range(len(dataY))]\n",
    "#     random.shuffle(indx)\n",
    "    dataPartision = 0.1\n",
    "#     totaltrainsample = int(dataPartision*len(dataY))\n",
    "    trainX, testX, trainY, testY = train_test_split(dataX, dataY, \n",
    "                                                    test_size=dataPartision, \n",
    "                                                    random_state=np.random.randint(100))\n",
    "#     trainX = dataX.iloc[indx[0:totaltrainsample],:]\n",
    "    trainX = trainX.reset_index(drop=True)\n",
    "    trainX = trainX.dropna()\n",
    "#     trainX = dataY.iloc[indx[0:totaltrainsample]]\n",
    "    trainY = trainY.reset_index(drop=True)\n",
    "    trainY = trainY.dropna()\n",
    "\n",
    "#     testX = dataX.iloc[indx[totaltrainsample:],:]\n",
    "    testX = testX.reset_index(drop=True)\n",
    "    testX = testX.dropna()\n",
    "#     testY = dataY.iloc[indx[totaltrainsample:]]\n",
    "    testY = testY.reset_index(drop=True)\n",
    "    testY = testY.dropna()\n",
    "\n",
    "    clf = tree.DecisionTreeClassifier(criterion='gini',#'entropy',#'gini', \n",
    "                                      splitter='best', \n",
    "                                      max_depth=None,#default None \n",
    "                                      min_samples_split=2, \n",
    "                                      min_samples_leaf=1, \n",
    "                                      min_weight_fraction_leaf=0.0, \n",
    "                                      max_features=None, \n",
    "                                      random_state=None, \n",
    "                                      max_leaf_nodes=None, \n",
    "                                      min_impurity_decrease=0.0, \n",
    "                                      min_impurity_split=None, \n",
    "                                      class_weight=None, \n",
    "                                      presort=False)                                             \n",
    "\n",
    "\n",
    "    clf = clf.fit(trainX, trainY) \n",
    "    # # save the model for future use\n",
    "    # joblib.dump(clf, 'trainedModel.pkl', protocol=2)\n",
    "    # # clf = joblib.load('trainedModel.pkl') \n",
    "\n",
    "#     trainAccuracy = trainAccuracy + clf.score(trainX, trainY)\n",
    "#     testAccuracy = testAccuracy + clf.score(testX, testY)\n",
    "    maxDepth = clf.max_depth\n",
    "    \n",
    "    score,precision,recall,fbeta_score,support = calc_stat(clf,trainX,trainY)\n",
    "    trainAccuracy += score\n",
    "    trainPrecision += precision\n",
    "    trainRecall += recall\n",
    "    trainF1score += fbeta_score\n",
    "    \n",
    "    score,precision,recall,fbeta_score,support = calc_stat(clf,testX,testY)\n",
    "    testAccuracy += score\n",
    "    testPrecision += precision\n",
    "    testRecall += recall\n",
    "    testF1score += fbeta_score\n",
    "    \n",
    "    score,precision,recall,fbeta_score,support = calc_stat(clf,intelX,intelY)\n",
    "    intelAccuracy += score\n",
    "    intelPrecision += precision\n",
    "    intelRecall += recall\n",
    "    intelF1score += fbeta_score\n",
    "    \n",
    "    score,precision,recall,fbeta_score,support = calc_stat(clf,arX,arY)\n",
    "    arAccuracy += score\n",
    "    arPrecision += precision\n",
    "    arRecall += recall\n",
    "    arF1score += fbeta_score\n",
    "    arsupport = support\n",
    "    \n",
    "    score,precision,recall,fbeta_score,support = calc_stat(clf,simirisX,simirisY)\n",
    "    irisAccuracy += score\n",
    "    irisPrecision += precision\n",
    "    irisRecall += recall\n",
    "    irisF1score += fbeta_score\n",
    "    \n",
    "    score,precision,recall,fbeta_score,support = calc_stat(clf,simsoloX,simsoloY)\n",
    "    soloAccuracy += score\n",
    "    soloPrecision += precision\n",
    "    soloRecall += recall\n",
    "    soloF1score += fbeta_score\n",
    "\n",
    "# trainAccuracy = trainAccuracy/Noofrun\n",
    "# testAccuracy = testAccuracy/Noofrun\n",
    "# print('train accuracy: ', trainAccuracy, ' test accuracy: ', testAccuracy, ' max depth: ', maxDepth)\n",
    "\n",
    "# if own_data:\n",
    "#     intelAccuracy = clf.score(intelX, intelY)\n",
    "#     print('intel accuracy: ', intelAccuracy)\n",
    "\n",
    "#     simAccuracy = clf.score(simX, simY)\n",
    "#     print('sim accuracy: ', simAccuracy)\n",
    "    \n",
    "#     simirisAccuracy = clf.score(simirisX, simirisY)\n",
    "#     print('sim iris accuracy: ', simirisAccuracy)\n",
    "    \n",
    "#     simsoloAccuracy = clf.score(simsoloX, simsoloY)\n",
    "#     print('sim solo accuracy: ', simsoloAccuracy)\n",
    "\n",
    "    \n",
    "# if experiment == 1 or experiment == 4:\n",
    "#     testY_pred = clf.predict(testX)\n",
    "#     y_true = testY\n",
    "#     y_pred = testY_pred\n",
    "# elif experiment == 2:\n",
    "#     testY_pred = clf.predict(intelX)\n",
    "#     y_true = intelY\n",
    "#     y_pred = testY_pred\n",
    "# elif experiment == 3:\n",
    "#     testY_pred = clf.predict(simX)\n",
    "#     y_true = simY\n",
    "#     y_pred = testY_pred\n",
    "        \n",
    "# precision,recall,fbeta_score,support = precision_recall_fscore_support(y_true, \n",
    "#                                                                        y_pred, \n",
    "#                                                                        beta=1.0, \n",
    "#                                                                        labels=None, \n",
    "#                                                                        pos_label=1, \n",
    "#                                                                        average=None, \n",
    "#                                                                        warn_for=('precision', 'recall', 'f-score'), \n",
    "#                                                                        sample_weight=None)\n",
    "\n",
    "print('Train stat:')\n",
    "print('Accuracy: ', trainAccuracy/Noofrun)\n",
    "print('precision: ', (trainPrecision/Noofrun))\n",
    "print('recall: ', (trainRecall/Noofrun))\n",
    "print('Fscore: ', (trainF1score/Noofrun))\n",
    "print('support', arsupport)\n",
    "\n",
    "print('Test stat:')\n",
    "print('Accuracy: ', testAccuracy/Noofrun)\n",
    "print('precision: ', (testPrecision/Noofrun))\n",
    "print('recall: ', (testRecall/Noofrun))\n",
    "print('Fscore: ', (testF1score/Noofrun))\n",
    "\n",
    "print('Intel stat:')\n",
    "print('Accuracy: ', intelAccuracy/Noofrun)\n",
    "print('precision: ', (intelPrecision/Noofrun))\n",
    "print('recall: ', (intelRecall/Noofrun))\n",
    "print('Fscore: ', (intelF1score/Noofrun))\n",
<<<<<<< HEAD
    "\n",
    "print('AR stat:')\n",
    "print('Accuracy: ', arAccuracy/Noofrun)\n",
    "print('precision: ', (arPrecision/Noofrun))\n",
    "print('recall: ', (arRecall/Noofrun))\n",
    "print('Fscore: ', (arF1score/Noofrun))\n",
=======
>>>>>>> figures change
    "\n",
    "print('Iris stat:')\n",
    "print('Accuracy: ', irisAccuracy/Noofrun)\n",
    "print('precision: ', (irisPrecision/Noofrun))\n",
    "print('recall: ', (irisRecall/Noofrun))\n",
    "print('Fscore: ', (irisF1score/Noofrun))\n",
    "\n",
    "print('Solo stat:')\n",
    "print('Accuracy: ', soloAccuracy/Noofrun)\n",
    "print('precision: ', (soloPrecision/Noofrun))\n",
    "print('recall: ', (soloRecall/Noofrun))\n",
    "print('Fscore: ', (soloF1score/Noofrun))\n",
<<<<<<< HEAD
=======
    "\n",
    "print('Simulation testy Data: ', 'Hold: ', len(testY[testY=='Hold']),\n",
    "      ' Takeoff: ', len(testY[testY=='Takeoff']),\n",
    "      ' Hover: ', len(testY[testY=='Hover']),\n",
    "      ' Search: ', len(testY[testY=='Search']),\n",
    "      ' Land: ', len(testY[testY=='Land']),\n",
    "      ' Total: ', len(testY))\n",
    "\n",
    "y_true = testY\n",
    "y_pred = clf.predict(testX) \n",
    "# Compute confusion matrix\n",
    "cnf_matrix = confusion_matrix(y_true, y_pred)\n",
>>>>>>> figures change
    "\n",
    "np.set_printoptions(precision=2)\n",
    "\n",
    "data_class_name = ['Hold', 'Hover', 'Land', 'Search', 'Takeoff']\n",
    "# Plot non-normalized confusion matrix\n",
    "plt.figure()\n",
    "cm_non_normalized = plot_confusion_matrix(cnf_matrix, classes=data_class_name,\n",
    "                      title='Confusion matrix, without normalization')\n",
    "\n",
    "# Plot normalized confusion matrix\n",
    "plt.figure()\n",
    "cm_normalized = plot_confusion_matrix(cnf_matrix, classes=data_class_name, normalize=True,\n",
    "                      title='Normalized confusion matrix')\n",
    "\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[1799    0   17    0   19]\n",
      " [   0  509    3   78   16]\n",
      " [  31    2  396   11    1]\n",
      " [   0   93    6 4119   14]\n",
      " [  18   21    0   11  343]]\n",
      "Normalized confusion matrix\n",
      "[[0.98 0.   0.01 0.   0.01]\n",
      " [0.   0.84 0.   0.13 0.03]\n",
      " [0.07 0.   0.9  0.02 0.  ]\n",
      " [0.   0.02 0.   0.97 0.  ]\n",
      " [0.05 0.05 0.   0.03 0.87]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x22569f7ccf8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x22569f7f978>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "testY_pred = clf.predict(testX)\n",
    "y_true = testY\n",
    "y_pred = testY_pred\n",
    "\n",
    "# # Compute confusion matrix\n",
    "cnf_matrix = confusion_matrix(y_true, y_pred)\n",
    "np.set_printoptions(precision=2)\n",
    "data_class_name = ['Hold', 'Hover', 'Land', 'Search', 'Takeoff']\n",
    "# # Plot non-normalized confusion matrix\n",
    "plt.figure()\n",
    "cm_non_normalized = plot_confusion_matrix(cnf_matrix, classes=data_class_name,\n",
    "                       title='Confusion matrix, without normalization')\n",
    "\n",
    "# # Plot normalized confusion matrix\n",
    "plt.figure()\n",
    "cm_normalized = plot_confusion_matrix(cnf_matrix, classes=data_class_name, normalize=True,\n",
    "                       title='Normalized confusion matrix')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
=======
   "execution_count": 36,
>>>>>>> figures change
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Visualize data\n",
    "dot_data = tree.export_graphviz(clf,\n",
    "                                feature_names=data_feature_names,\n",
    "                                class_names=data_class_name,\n",
    "                                out_file=None,\n",
    "                                max_depth=None,\n",
    "                                leaves_parallel=False,\n",
    "                                filled=True,\n",
    "                                rounded=True,\n",
    "                                special_characters=True) \n",
    "                         \n",
    "graph = pydotplus.graph_from_dot_data(dot_data)\n",
    "\n",
    "colors = ('turquoise', 'orange')\n",
    "edges = collections.defaultdict(list)\n",
    "\n",
    "for edge in graph.get_edge_list():\n",
    "    edges[edge.get_source()].append(int(edge.get_destination()))\n",
    "\n",
    "for edge in edges:\n",
    "    edges[edge].sort()    \n",
    "    for i in range(2):\n",
    "        dest = graph.get_node(str(edges[edge][i]))[0]\n",
    "        dest.set_fillcolor(colors[i])\n",
    "\n",
    "graph.write_png('tree.png')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "scenario accuracy:  0.997\n",
      "precision:  [1.   1.   0.95 1.   1.  ]\n",
      "recall:  [1.   1.   1.   0.99 1.  ]\n",
      "Fscore:  [1.   1.   0.97 1.   1.  ]\n",
      "support [236  49  52 599  64]\n",
      "Confusion matrix, without normalization\n",
      "[[236   0   0   0   0]\n",
      " [  0  49   0   0   0]\n",
      " [  0   0  52   0   0]\n",
      " [  0   0   3 596   0]\n",
      " [  0   0   0   0  64]]\n",
      "Normalized confusion matrix\n",
      "[[1.   0.   0.   0.   0.  ]\n",
      " [0.   1.   0.   0.   0.  ]\n",
      " [0.   0.   1.   0.   0.  ]\n",
      " [0.   0.   0.01 0.99 0.  ]\n",
      " [0.   0.   0.   0.   1.  ]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x22572a4e8d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x2256e4e3f60>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "********************************REPORT********************************\n",
      "The experiment follows the true scenerio  99.7 %.\n",
      "Details: \n",
      "The experiment follows  Hold state     100.0 %,  \n",
      "\t\t\tHover state  100.0 %,  \n",
      "\t\t\tLand state    100.0 %,  \n",
      "\t\t\tSearch state   99.5 %,  \n",
      "\t\t\tTakeoff state     100.0 %. \n",
      "Recommendation: The following states need to be checked,  ['Search']\n",
      "******************************END REPORT******************************\n"
     ]
    },
    {
     "data": {
      "image/png": "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0Lp1ayZOnEifPn12zzdjxgxuv/12hg8fznXXXcf8+fOprKxkzJgxnHXWWSxcuJArrriCnTt3Ul1dzeTJk3dfyW1MfeLdIe25DetyADI1OSRRZWUl7777LqeffjoAixcvZuLEiTzxxBNs3LiRe++9l2nTptG2bVseeOABHnroIW699VZ+/etfM336dPr16+d5BTU4w3off/zxTJkyhaqqKsrKyhg3bhwLFizYfSX21KlTWbJkCZ9//jmqyogRI5gxYwZt27bl5Zdf5quvvqKyspIBAwZ4JoexY8fy/vvv0717d4qLi2nZsiVjx45l9uzZPPbYYwCUlpYyY8YMWrRowbRp07jtttuYPHny7vnuv/9+cnNzue222zjxxBN55plnKC4u5qijjuLkk09m/Pjx3HDDDVx00UXs3LmTqqrwL7wxXjxPZbVRWX1hySFOduzYQX5+PuDUHK688krWrFlDr169do9fNHPmTL755pvdw2Dv3LmTwYMH8+2339KnT5/dv54vvvhiJkyoe0dVmD59OpMmTQLY/ct+y5YtteaZOnUqU6dOrTUU95IlS9i6dSs///nPadOmDcDu25rWNWTIEC6//HLOP/98zjnnHM95SkpKuOyyy1iyZAkiwq5duzznmzp1Km+++ebuvo3y8nJ++OEHBg8ezH333UdRURHnnHOO1RpM9Lw6pJtUc7DEEoklhzip6XOoK3TIblXllFNO4aWXXqo1z9y5c5s0smQoVWX06NH85je/qVX+17/+NaptjB8/nlmzZvH222+Tn5/v+ZruvPNOTjjhBKZMmcLKlSsj3pJQVZk8eTI/+9nPapUfeOCBDBw4kLfffpvTTjuNp556ihNPPDH6F2maLa9RWePfrGTtSmAd0gk1aNAg/vvf/7J06VIAtm/fznfffccBBxzAihUrWLZsGUBY8qhx0kkn8eSTTwJQVVVFaWmp51DczzzzDGVlZQCsXr2a9evXc9xxxzFlyhR27NjB1q1b+fe//+25jWXLljFw4EDGjh1Lp06dWLVqleew4N27dwfg2Wef3V3uFcujjz66+8v21VdfAc7Q4/vuuy/XX389I0aM2H3/bWMapF59Dk3pkDaR+F5zEJEsYDawWlWH15l2OfAgsNotekxVn2ryRk8Y7fzVkewhuzt37syzzz7LL3/5y91Ddd97773sv//+TJgwgTPOOINO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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x225720f20b8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# check a scenerio and generate report\n",
    "datascenario = pd.read_csv('dataset15.csv')\n",
    "datascenario = datascenario.dropna()\n",
    "scenarioX = datascenario.iloc[:,0:4]\n",
    "scenarioX = scenarioX.reset_index(drop=True)\n",
    "scenarioX = scenarioX.dropna()\n",
    "scenarioY = datascenario.iloc[:,-1]\n",
    "scenarioY = scenarioY.replace(data_class_name_num, data_class_name)\n",
    "scenarioY = scenarioY.reset_index(drop=True)\n",
    "scenarioY = scenarioY.dropna()\n",
    "\n",
    "# scenarioX,scenarioY = simirisX,simirisY\n",
    "# trainX, testX, trainY, testY = train_test_split(scenarioX, scenarioY, \n",
    "#                                                     test_size=0.1, \n",
    "#                                                     random_state=np.random.randint(100))\n",
    "# clf = clf.fit(trainX,trainY) \n",
    "\n",
    "scenarioY_pred = clf.predict(scenarioX)\n",
    "\n",
    "scenarioAccuracy = clf.score(scenarioX, scenarioY)\n",
    "print('scenario accuracy: ', scenarioAccuracy)\n",
    "\n",
    "y_true = scenarioY\n",
    "y_pred = scenarioY_pred\n",
    "        \n",
    "precision,recall,fbeta_score,support = precision_recall_fscore_support(y_true, \n",
    "                                                                       y_pred, \n",
    "                                                                       beta=1.0, \n",
    "                                                                       labels=None, \n",
    "                                                                       pos_label=1, \n",
    "                                                                       average=None, \n",
    "                                                                       warn_for=('precision', 'recall', 'f-score'), \n",
    "                                                                       sample_weight=None)\n",
    "print('precision: ', precision)\n",
    "print('recall: ', recall)\n",
    "print('Fscore: ', fbeta_score)\n",
    "print('support', support)\n",
    "\n",
    "# Compute confusion matrix\n",
    "cnf_matrix = confusion_matrix(y_true, y_pred)\n",
    "np.set_printoptions(precision=2)\n",
    "\n",
    "data_class_name = ['Hold', 'Hover', 'Land', 'Search', 'Takeoff']\n",
    "# Plot non-normalized confusion matrix\n",
    "plt.figure()\n",
    "cm_non_normalized = plot_confusion_matrix(cnf_matrix, classes=data_class_name,\n",
    "                      title='Confusion matrix, without normalization')\n",
    "\n",
    "# Plot normalized confusion matrix\n",
    "plt.figure()\n",
    "cm_normalized = plot_confusion_matrix(cnf_matrix, classes=data_class_name, normalize=True,\n",
    "                      title='Normalized confusion matrix')\n",
    "\n",
    "plt.show()\n",
    "\n",
    "y_true = y_true.replace(data_class_name, data_class_name_num)\n",
    "y_pred = pd.DataFrame(y_pred)\n",
    "y_pred = y_pred.replace(data_class_name, data_class_name_num)\n",
    "time = np.linspace(start=0,stop=17,num=len(y_true))\n",
    "\n",
    "\n",
    "reco = []\n",
    "for i in range(len(data_class_name)):\n",
    "    if cm_normalized[i,i] != 1.0:\n",
    "        reco.append(data_class_name[i])\n",
    "\n",
    "print('********************************REPORT********************************')\n",
    "print('The experiment follows the true scenerio ', scenarioAccuracy*100,'%.')\n",
    "print('Details: ')\n",
    "print('The experiment follows  Hold state    ', round(cm_normalized[0,0]*100,2),'%, ',\n",
    "                            '\\n\\t\\t\\tHover state ', round(cm_normalized[1,1]*100,2),'%, ',\n",
    "                            '\\n\\t\\t\\tLand state   ', round(cm_normalized[2,2]*100,2),'%, ',\n",
    "                            '\\n\\t\\t\\tSearch state  ', round(cm_normalized[3,3]*100,2),'%, ',\n",
    "                            '\\n\\t\\t\\tTakeoff state    ', round(cm_normalized[4,4]*100,2),'%. ')\n",
    "if reco:\n",
    "    print('Recommendation: The following states need to be checked, ', reco)\n",
    "plt.figure()\n",
    "plt.plot(time, y_true,lw=5.0,label='True states')\n",
    "plt.plot(time, y_pred,'--',lw=5.0,label='Predicted states')\n",
    "plt.xlabel('Time in second')\n",
    "plt.ylabel('States')\n",
    "plt.title('Plot of the states for the experiment')\n",
    "plt.legend()\n",
    "plt.grid()\n",
    "print('******************************END REPORT******************************')\n",
    "      \n",
    "\n",
    "# plt.plot(dataX.iloc[1:1000,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13979 (13979, 4)\n"
     ]
    }
   ],
   "source": [
    "print(len(intelY), intelX.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12011\n"
     ]
    }
   ],
   "source": [
    "print(totaltrainsample)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.70651882 0.12447465 0.04363766 0.08942144 0.03594742]\n"
     ]
    }
   ],
   "source": [
    "datasamples = np.array([7901,1392,488,1000,402])\n",
    "print(datasamples/sum(datasamples))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3715"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(simY[simY=='Hold'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 0.13,  0.13,  0.13, ..., -0.08, -0.08, -0.08])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "simX.iloc[:,1].values"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Hold', 'Takeoff', 'Hover', 'Search', 'Land'], dtype=object)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.unique(arY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Hold', 'Takeoff', 'Hover', 'Land', 'Search'], dtype=object)"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.unique(intelY)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Hold', 'Takeoff', 'Hover', 'Search', 'Land'], dtype=object)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.unique(simconcatY)"
=======
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "22948\n"
     ]
    }
   ],
   "source": [
    "print(len(testY))"
>>>>>>> figures change
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
